version: '3.2'
services:
  service-discovery:
    image: consul:latest
    container_name: service-discovery
    environment:
      - CONSUL_LOCAL_CONFIG={"enable_debug":true}
    ports:
      - 8500:8500
    volumes:
      - ./docker-entrypoint.sh:/docker-entrypoint.sh
    command: "agent -server -bootstrap -ui -client=0.0.0.0"
    networks:
      net:
        aliases:
          - service-discovery

  service-discovery-load-configuration:
    image: appropriate/curl
    container_name: service-discovery-load-configuration
    depends_on:
      - service-discovery
    networks:
      net:
        aliases:
          - service-discovery
    command: /service-discovery-load-configuration.sh
    volumes:
      - ./service-discovery-load-configuration.sh:/service-discovery-load-configuration.sh:ro
      - ./spring-cloud-config:/spring-cloud-config:ro

  gateway:
    image: edge-server:0.0.1-SNAPSHOT
    container_name: gateway
    environment:
      - SPRING_REDIS_HOST=redisdb
      - SPRING_PROFILES_ACTIVE=consul,dev
      - CONSUL_URL=service-discovery:8500
      - SPRING_CONFIG_IMPORT=consul:service-discovery:8500
      - SERVER_PORT=8080
      - SPRING_DATA_MONGODB_URI=mongodb://mongodb-datasource:27017
      - SPRING_DATA_MONGODB_DATABASE=docker
      - MANAGEMENT_ENDPOINTS_WEB_CORS_ALLOW_CREDENTIALS=false
      - DEBUG=true
      - SPRING_CLOUD_KUBERNETES_ENABLED=false
#      - LOGGING_LEVEL_COM_SPRINGBOOT=debug
#      - LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_SECURITY=trace
      - OPENTRACING_JAEGER_UDP_SENDER_HOST=jaeger
      - SPRING_MAIN_ALLOW_CIRCULAR_REFERENCES=true
      - SPRING_MAIN_WEB_APPLICATION_TYPE=reactive
#      - SPRING_CLOUD_GATEWAY_GLOBAL_CORS_ADD_TO_SIMPLE_URL_HANDLER_MAPPING=true
    depends_on:
      - service-discovery
    ports:
      - 8080:8080
    volumes:
      - ./docker-entrypoint.sh:/docker-entrypoint.sh
#    command: sh ./docker-entrypoint.sh service-discovery:8500
    networks:
      net:
        aliases:
          - gateway

  monitoring:
    image: admin-server
    container_name: monitoring
    environment:
      - SPRING_REDIS_HOST=redisdb
      - SPRING_PROFILES_ACTIVE=dev
#      - CONSUL_URL=service-discovery:8500
      - SPRING_CONFIG_IMPORT=consul:service-discovery:8500
      - SPRING_CLOUD_KUBERNETES_ENABLED=false
      - SERVER_PORT=9002
      - SPRING_DATA_MONGODB_HOST=mongodb-datasource
      - SPRING_DATA_MONGODB_DATABASE=docker
      - LOGGING_LEVEL_COM_SPRINGBOOT=debug
      - OAUTH_CLIENT_ID=actuator
      - OAUTH_CLIENT_SECRET=actuator_password
      - CONTEXTPATH=/monitoring
      - LOGGING_LEVEL_COM_MICROSERVICE=debug
      - MANAGEMENT_ENDPOINTS_WEB_CORS_ALLOW_CREDENTIALS=false
      - SPRING_CLOUD_KUBERNETES_LOADBALANCER_ENABLED=false
    depends_on:
      - service-discovery
    ports:
      - 9002:9002
    networks:
      net:
        aliases:
          - monitoring

  react-webapp:
    build:
      args:
        - PORT=3003
        - NODE_ENV=development
      context: ../react-webapp
      dockerfile: Dockerfile
    container_name: react-webapp
    environment:
      - NODE_ENV=development
    ports:
      - 3003:3003
    links:
      - gateway
    volumes:
      - ./docker-entrypoint.sh:/tmp/docker-entrypoint.sh
    #            - .:/usr/src/app
    #            - ./node_modules:/usr/src/app/node_modules
    command: sh /tmp/docker-entrypoint.sh gateway:8080
    networks:
      net:
        aliases:
          - react-webapp

  week-menu-api:
    build:
      context: ../nodejs-service
      dockerfile: Dockerfile
    container_name: week-menu-api
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - CONFIG_SERVER=http://localhost:8888
      - SERVER_PORT=3002
      - MONGODB_URI=mongodb://mongodb-datasource:27017/docker
      - CONSUL_URL=service-discovery:8500
      - EUREKA_PORT=8761
      #            - DEBUG=*
      #            - NODE_DEBUG=request
      - HOST_NAME=week-menu-api
      - IP_ADDRESS=week-menu-api
    depends_on:
      - service-discovery
    links:
      - service-discovery
    ports:
      - 3002:3002
    volumes:
      - ./docker-entrypoint.sh:/tmp/docker-entrypoint.sh
    command: sh /tmp/docker-entrypoint.sh service-discovery:8500
    networks:
      net:
        aliases:
          - week-menu-api

#  receipt-api:
#    build:
#      args:
#        - PORT=8086
#      context: ../python-service
#      dockerfile: Dockerfile
#    container_name: receipt-api
#    environment:
#      - ENV_FILE_LOCATION=./.env
#      - CONSUL_HOST=service-discovery
#      - MONGODB_URI=mongodb://mongodb-datasource/docker
#      - SERVER_PORT=8086
#      - LOG_LEVEL=TRACE
#      - JAEGER_HOST=jaeger
#    depends_on:
#      - service-discovery
#      - mongodb-datasource
#      - jaeger
#    ports:
#      - 8086:8086
#    networks:
#      net:
#        aliases:
#          - receipt-api

  post-api:
    build:
      args:
        - PORT=3006
        - ENV=docker
      context: ../go-service
      dockerfile: Dockerfile
    container_name: post-api
    environment:
      - CONSUL_URL=service-discovery:8500
      - MONGODB_URI=mongodb://mongodb-datasource
      - MONGODB_DATABASE=docker
      - SERVER_PORT=3006
      - LOG_LEVEL=TRACE
    depends_on:
      - service-discovery
      - mongodb-datasource
    ports:
      - 3006:3006
    volumes:
      - ./docker-entrypoint.sh:/tmp/docker-entrypoint.sh
    command: sh /tmp/docker-entrypoint.sh service-discovery:8500
    networks:
      net:
        aliases:
          - post-api

  person-api:
    image: person-service:0.0.1-SNAPSHOT
    container_name: person-api
    environment:
      - SPRING_PROFILES_ACTIVE=consul,dev
      - CONSUL_URL=service-discovery:8500
      - SPRING_CONFIG_IMPORT=consul:service-discovery:8500
      - SERVER_PORT=8082
      - SPRING_CLOUD_KUBERNETES_ENABLED=false
      - SPRING_DATA_MONGODB_URI=mongodb://mongodb-datasource:27017
      - SPRING_DATA_MONGODB_DATABASE=docker
      - OPENTRACING_JAEGER_UDP_SENDER_HOST=jaeger
#      - LOGGING_LEVEL_ORG_SPRINGFRAMEWORK=trace
      - MANAGEMENT_ENDPOINTS_WEB_CORS_ALLOW_CREDENTIALS=false
      - DEBUG=true
    depends_on:
      - service-discovery
      - mongodb-datasource
      - jaeger
      - service-discovery-load-configuration
    ports:
      - 8082:8082
    volumes:
      - ./docker-entrypoint.sh:/docker-entrypoint.sh
#    command: sh ./docker-entrypoint.sh service-discovery:8500
    networks:
      net:
        aliases:
          - person-api

  task-api:
    image: kotlin-service:0.0.1-SNAPSHOT
    container_name: task-api
    environment:
      - SPRING_PROFILES_ACTIVE=consul,dev
      - CONSUL_URL=service-discovery:8500
      - SPRING_CONFIG_IMPORT=consul:service-discovery:8500
      - SERVER_PORT=8084
      - SPRING_CLOUD_KUBERNETES_ENABLED=false
      - SPRING_DATA_MONGODB_URI=mongodb://mongodb-datasource:27017
      - SPRING_DATA_MONGODB_DATABASE=docker
      - OPENTRACING_JAEGER_UDP_SENDER_HOST=jaeger
      - MANAGEMENT_ENDPOINTS_WEB_CORS_ALLOW_CREDENTIALS=false
      #- DEBUG=true
#      - LOGGING_LEVEL_ORG_SPRINGFRAMEWORK=trace
    depends_on:
      - service-discovery
      - mongodb-datasource
      - jaeger
      - service-discovery-load-configuration
    ports:
      - 8084:8084
    volumes:
      - ./docker-entrypoint.sh:/docker-entrypoint.sh
#    command: sh ./docker-entrypoint.sh service-discovery:8500
    networks:
      net:
        aliases:
          - task-api

#  company-api:
#    image: quarkus-service
#    container_name: company-api
#    environment:
#      - SPRING_PROFILES_ACTIVE=quarkus
#      - CONSUL_URL=service-discovery:8500
#      - QUARKUS_HTTP_PORT=8085
#      - MONGODB_URI=mongodb://mongodb-datasource:27017
#      - MONGODB_DATABASE=docker
#      - QUARKUS_LOG_LEVEL=DEBUG
#    depends_on:
#      - service-discovery
#      - mongodb-datasource
#    ports:
#      - 8085:8085
##    volumes:
##      - ./docker-entrypoint.sh:/docker-entrypoint.sh
##    command: sh ./docker-entrypoint.sh service-discovery:8500
#    networks:
#      net:
#        aliases:
#          - task-api

  user-api:
    image: user-service:0.0.1-SNAPSHOT
    container_name: user-api
    environment:
      - SPRING_PROFILES_ACTIVE=consul,dev
      - CONSUL_URL=service-discovery:8500
      - SPRING_CONFIG_IMPORT=consul:service-discovery:8500
      - SERVER_PORT=8083
      - SPRING_CLOUD_KUBERNETES_ENABLED=false
      - SPRING_DATA_MONGODB_URI=mongodb://mongodb-datasource:27017
      - SPRING_DATA_MONGODB_DATABASE=docker
      - MANAGEMENT_ENDPOINTS_WEB_CORS_ALLOW_CREDENTIALS=false
      #- DEBUG=true
#      - LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_WEB=debug
      - LOGGING_LEVEL_COM_MICROSERVICE=debug
      - OPENTRACING_JAEGER_UDP_SENDER_HOST=jaeger
    links:
      - authentication-api
      - jaeger
    ports:
      - 8083:8083
    volumes:
      - ./docker-entrypoint.sh:/docker-entrypoint.sh
#    command: sh ./docker-entrypoint.sh authentication-api:9999
    networks:
      net:
        aliases:
          - user-api

  authentication-api:
    # Using docker spring boot docker image
    image: authentication-service:0.0.1-SNAPSHOT
    # Using docker local jib maven
    #image: authentication-service:latest #fielcapao/microservices-design-patterns-authentication-service
    # Using docker raspberry pi image
    #image: fielcapao/microservices-design-patterns-authentication-service
    container_name: authentication-api
    environment:
      - SPRING_PROFILES_ACTIVE=consul,dev
      - SPRING_REDIS_HOST=redisdb
      - CONSUL_URL=service-discovery:8500
      - SERVER_PORT=9999
      - SPRING_DATA_MONGODB_URI=mongodb://mongodb-datasource:27017
      - SPRING_DATA_MONGODB_DATABASE=docker
      - SPRING_MAIN_ALLOW_CIRCULAR_REFERENCES=true
#      - DEBUG=true
      - MANAGEMENT_ENDPOINTS_WEB_CORS_ALLOW_CREDENTIALS=false
#      - LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_SECURITY=debug
#      - LOGGING_LEVEL_ORG_SPRINGFRAMEWORK=trace
      - LOGGING_LEVEL_COM_MICROSERVICE=debug
      - SPRING_CLOUD_KUBERNETES_ENABLED=false
      - CLIENT_ID=${CLIENT_ID}
      - CLIENT_SECRET=${CLIENT_SECRET}
      - SPRING_CONFIG_IMPORT=consul:service-discovery:8500
      - JAVA_OPTS=-Xss256K -Xms1M -XX:+UseSerialGC -Djava.compiler=none -XX:ReservedCodeCacheSize=2496k -XX:MaxDirectMemorySize=1M
#      - LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_SECURITY=debug
    depends_on:
      - service-discovery
      - mongodb-datasource
      - gateway
      - monitoring
      - redisdb
      - jaeger
      - service-discovery-load-configuration
    ports:
      - 9999:9999
    volumes:
      - ./docker-entrypoint.sh:/docker-entrypoint.sh
#    command: sh ./docker-entrypoint.sh service-discovery:8500
    networks:
      net:
        aliases:
          - authentication-api

  mongodb-datasource:
    image: mongo
    command: mongod --port 27017
    container_name: mongodb-datasource
    ports:
      - 27017:27017
    networks:
      net:
        aliases:
          - mongodb-datasource

  redisdb:
    image: redis:alpine
    container_name: redisdb
    ports:
      - 6379:6379
    networks:
      net:
        aliases:
          - redisdb

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    command:
#      - '--web.external-url=http://localhost:8080/admin/prometheus/'
      - '--web.route-prefix=/admin/prometheus'
      - '--config.file=/etc/prometheus/prometheus.yml'
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - 9090:9090
    depends_on:
      - service-discovery
    links:
      - service-discovery
    networks:
      net:
        aliases:
          - prometheus

  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - 3000:3000
    environment:
#      - GF_AUTH_ANONYMOUS_ENABLED=true
#      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_SERVER_HTTP_PORT=3000
      - GF_SERVER_DOMAIN=http://localhost:3000
      - GF_SERVER_ROOT_URL=http://localhost:3000/admin/grafana
      - GF_SERVER_SERVE_FROM_SUB_PATH=true
      - GF_AUTH_JWT_ENABLED=true
      - GF_AUTH_JWT_HEADER_NAME=Authorization
      - GF_AUTH_JWT_USERNAME_CLAIM=sub
      - GF_AUTH_JWT_EMAIL_CLAIM=user_name
      - GF_AUTH_JWT_URL_LOGIN=http://localhost:8080/login
#      - GF_AUTH_JWT_JWK_SET_URL=http://localhost:8080/.well-known/jwks.json
      - GF_AUTH_JWT_ROLE_ATTRIBUTE_PATH=contains(authorities[*], 'ROLE_ADMIN') && 'Admin' || contains(authorities[*], 'editor') && 'Editor' || 'Viewer'
      - GF_AUTH_JWT_JWK_SET_FILE=/etc/grafana/jwks.json
      - GF_AUTH_BASIC_ENABLED=false
#      - GF_DIAGNOSTICS_TRACING_ENABLED=true
#      - GF_DIAGNOSTICS_TRACING_FILE=/tmp/trace.out
#      - GF_AUTH_GENERIC_OAUTH_ENABLED=true
#      - GF_AUTH_GENERIC_OAUTH_SCOPES=read
#      - GF_AUTH_GENERIC_OAUTH_ALLOW_SIGN_UP=false
#      - GF_AUTH_GENERIC_OAUTH_CLIENT_ID=client
#      - GF_AUTH_GENERIC_OAUTH_CLIENT_SECRET=secret
#      - GF_AUTH_GENERIC_OAUTH_AUTH_URL=http://localhost:9999/oauth/authorize
#      - GF_AUTH_GENERIC_OAUTH_TOKEN_URL=http://localhost:9999/oauth/token
#      - GF_AUTH_GENERIC_OAUTH_API_URL=http://localhost:9999/api/authenticatedUser
    volumes:
      - ./jwks.json:/etc/grafana/jwks.json
    networks:
      net:
        aliases:
          - grafana

  setup_grafana_datasource:
    image: appropriate/curl
    container_name: setup_grafana_datasource
    depends_on:
      - grafana
    volumes:
      - ./create-datasource-and-dashboard.sh:/create.sh:ro
    command: /create.sh
    networks:
      net:
        aliases:
          - setup_grafana_datasource

  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: jaeger
    ports:
      - "6831:6831/udp"
      - "16686:16686"
    environment:
        QUERY_BASE_PATH: "/admin/jaeger"
    networks:
      net:
        aliases:
          - jaeger

  zookeeper:
    image: antrea/confluentinc-zookeeper:6.2.0
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - '2181:2181'
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  broker:
    image: antrea/confluentinc-kafka:6.2.0
    hostname: broker
    container_name: broker
    depends_on:
      - zookeeper
    ports:
      - '9092:9092'
      - '9101:9101'
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092
      # NOTE: Not supported by current container
      # KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
      # TODO: Uncomment once enable schema registry
      # KAFKA_CONFLUENT_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: broker:29092
      CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
      CONFLUENT_METRICS_ENABLE: 'true'
      CONFLUENT_SUPPORT_CUSTOMER_ID: 'anonymous'

networks:
  net:
