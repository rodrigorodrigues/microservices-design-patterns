# This is a basic workflow to help you get started with Actions

name: CI - Build and push Docker images - Authentication Service

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches: [ master ]

# Environment variables available to all jobs and steps in this workflow
env:
  GKE_PROJECT: ${{ secrets.GKE_PROJECT }}
  GKE_EMAIL: ${{ secrets.GKE_EMAIL }}
  GITHUB_SHA: ${{ github.sha }}
  GKE_ZONE: ${{ secrets.GKE_ZONE }}
  GKE_CLUSTER: ${{ secrets.GKE_CLUSTER }}
  GKE_KEY: ${{ secrets.GKE_KEY }}
  IMAGE: authentication-service

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    if: contains(toJson(github), 'build authentication-service')
    name: Build Jar/Docker Image and Publish to DockerHub

    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout
        uses: actions/checkout@v2

      # Set up JDK
      - name: JDK
        uses: actions/setup-java@v1
        with:
          java-version: 17

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      # Login to Dockerhub
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Build the Docker image with Maven
      - name: Build Service
        run: |
           mvn clean install -DskipTests -q -pl authentication-service -am -B -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn -Dspring.profiles.active=travis docker:build

#        run: |
#          sed -i 's/openjdk:8-jre-alpine/balenalib\/raspberry-pi-alpine-openlighten itjdk:8/g' pom.xml
#          mvn clean install -q -pl authentication-service -am -B -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn -Dspring.profiles.active=travis docker:build
#          docker tag authentication-service:latest fielcapao/microservices-design-patterns-authentication-service

     # Push Image for multi arch
      - name: Push Image(amd64/arm64)
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: ./authentication-service/target/docker/authentication-service/build
          file: ./authentication-service/target/docker/authentication-service/build/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: fielcapao/microservices-design-patterns-authentication-service:latest

      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}

# Setup gcloud CLI
#      - name: Setup Google Cloud
#        uses: google-github-actions/setup-gcloud@master
#        with:
#          project_id: ${{ secrets.GKE_PROJECT }}
#          service_account_key: ${{ secrets.GKE_KEY }}
#          export_default_credentials: true
#
## Configure docker to use the gcloud command-line tool as a credential helper
#      - name: Set up docker to authenticate
#        run: |
#          gcloud --quiet auth configure-docker
#          gcloud info
#
## Release Tag to Google Cloud
#      - name: Publish image to Google Cloud
#        run: |
#          docker tag $IMAGE:latest eu.gcr.io/$GKE_PROJECT/$IMAGE:$GITHUB_SHA
#          docker push eu.gcr.io/$GKE_PROJECT/$IMAGE:$GITHUB_SHA
#
